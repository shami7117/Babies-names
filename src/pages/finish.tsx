import Head from "next/head";
import Navbar from "@/components/Navbar";
import SearchIcon from "@/components/Icons/SearchIcon";
import CircleIcon from "@/components/Icons/CircleIcon";
import { CopyToClipboard } from "react-copy-to-clipboard";
import NameHolderSelected from "@/components/NameHolderSelected";
import { useContext, useEffect, useMemo, useState } from "react";
import { BabyInterface } from "@/utils/types";
import NotFoundMessage from "@/components/NotFoundMessage";
import FinishModal from "@/components/FinishModal";
import { useRouter } from "next/router";
import en from "../../locales/en";
import he from "../../locales/he";
import CloseIcon from "@/components/Icons/CloseIcon";
import axios from "axios";
import { NamesContext } from "./_app";
import Ad from "@/components/Ad";
import NameHolderFinal from "@/components/NameHolderFinal";
import ShareIcon from "@/components/Icons/ShareIcon";
import { ToastContainer, toast } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
import SelectArea from "@/components/SelectArea";

export default function Finish() {
  // getNames();
  // function getNames(): string[] | undefined {
  //   let names: string | null = localStorage.getItem("names");
  //   if (names) {
  //     return JSON.parse(names);
  //   } else {
  //     return [];
  //   }
  // }

  // const [getnames, setGetnames] = useState(getNames());
  // console.log(getnames);

  const { Set_API_NAMES, AllNames, NamesDispatch } = useContext(NamesContext);

  const router = useRouter();
  const { SelectedNames, API_NAMES, dispatch } = useContext(NamesContext);

  const [Gender, setGender] = useState("");
  const { locale } = router;
  const t = locale === "en" ? en : he;
  const [current, setcurrent] = useState("");
  const [SearchName, setSearchName] = useState("");
  const [filterednames, setfilterednames] =
    useState<BabyInterface[]>(API_NAMES);

  const [show, setShow] = useState(false);
  const [cursor, setcursor] = useState(50);

  const findName = (name: string) => {
    setSearchName(name);
    if (Gender == "") {
      setfilterednames(API_NAMES.filter((baby) => baby.name.startsWith(name)));
    } else {
      setfilterednames(
        API_NAMES.filter(
          (baby) => baby.name.startsWith(name) && baby.gender == Gender
        )
      );
    }
  };
  const findGender = (gender: string) => {
    // console.log(window.location.href);
    if (Gender == gender) {
      setGender("");
      setfilterednames(
        API_NAMES.filter((baby) => baby.name.startsWith(SearchName))
      );
    } else {
      setGender(gender);
      setfilterednames(
        API_NAMES.filter(
          (baby) => baby.name.startsWith(SearchName) && baby.gender == gender
        )
      );
    }
  };

  // const router = useRouter();

  const [Showmore, setShowmore] = useState(false);
  const names = JSON.stringify(SelectedNames);
  useEffect(() => {
    setcurrent(window.location.href + names);
  }, []);

  // router.query.names = names;
  // router.push(router);
  // router.push({ href: "/", query: { names: names } });
  //  const [Showmore, setShowmore] = useState(false);
  //  useEffect(() => {
  //    let names = JSON.stringify(SelectedNames);
  //    setcurrent(window.location.href + names);
  //    console.log(SelectedNames);
  //  }, []);
  // const [Showmore, setShowmore] = useState(false);
  // useEffect(() => {
  //   setcurrent(window.location.href);
  // }, []);

  const UnselectName = (baby: BabyInterface) => {
    if (SelectedNames.includes(baby)) {
      dispatch!({ type: "REMOVE", payload: baby });
      setfilterednames([baby, ...filterednames]);
    }
  };

  // const { name } = SelectedNames;
  console.log(SelectedNames);
  return (
    <div className="relative  z-10">
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Navbar />
      <ToastContainer />

      <div className="mx-auto container px-[50px] sm:px-[100px] md:px-[220px] lg:px-[320px] pt-16 text-center   flex  flex-col justify-center items-center max-w-[1900px]">
        {show && <FinishModal closeModal={() => setShow(false)} />}

        <h1 className="font-poppins text-xl md:text-xl: text-[#0D0441]">
          {t.pickedheader}
        </h1>

        <div
          className={`flex w-full flex-col ${
            locale === "en" ? "xl:flex-row" : "xl:flex-row-reverse"
          }  items-center w-full z-1  pt-8`}
        >
          {/* Search component */}
          <div
            className={`relative rounded-full flex ${
              locale == "en" ? "flex-row" : "flex-row-reverse"
            }  shadow-md bg-white py-2 px-4 items-center w-full `}
          >
            <button className="cursor-pointer mx-2">
              <SearchIcon />
            </button>

            <input
              placeholder={t.search}
              value={SearchName}
              className={` md:flex-1 capitalize font-poppins text-[#8984A9] text-xl ml-2 ${
                locale == "he" ? "rtl-text" : ""
              }  mx-1  p-1 outline-none border-0`}
              onChange={(e) => findName(e.target.value)}
            />
            <button
              className={`mx-2 p-2 min-w-[10px] absolute ${
                locale == "en" ? "right-4" : "left-4"
              } `}
              onClick={() => findName("")}
            >
              <CloseIcon />
            </button>
          </div>
          {/* end Search component */}

          {/* Gender Picker */}
          <div className="relative flex mt-2 xl:mt-0">
            <button
              className={`flex mx-4 p-2   shadow-lg rounded-full items-center  ${
                Gender == "male" ? "bg-[#247488]" : "bg-white"
              }    ${locale == "en" ? "" : "text-rtl"}`}
              onClick={() => findGender("male")}
            >
              <CircleIcon color="#81CBE0" />
              <span
                className={`text-lg font-light px-2 capitalize bg-green ${
                  locale == "en" ? "" : "text-rtl"
                }`}
              >
                {t.boy}
              </span>
            </button>

            <button
              className={`flex mx-4 p-2 shadow-lg rounded-full items-center  ${
                Gender == "female" ? "bg-[#b3a0cc]" : "bg-white"
              } `}
              onClick={() => findGender("female")}
            >
              <CircleIcon color="#885AC3" />

              <span
                className={`text-lg font-light px-2 capitalize ${
                  locale == "en" ? "" : "text-rtl"
                }`}
              >
                {t.girl}
              </span>
            </button>
          </div>
          {/* end gender picker */}
        </div>

        <div className=" flex col md:flex-row  mt-6 w-full  items-center w-full  ">
          <div className="relative flex-1 w-full flex flex-col bg-white rounded-lg   px-9 py-8 shadow-lg">
            <CopyToClipboard
              text={current}
              onCopy={() =>
                toast.success("Link Copied Successfully !", {
                  autoClose: 1000,
                })
              }
            >
              <span className="absolute top-2 right-3 cursor-pointer p-2 bg-[#1C1067] rounded-full">
                <ShareIcon />
              </span>
            </CopyToClipboard>
            <div className="pb-4  flex flex-wrap min-h-[80px]">
              {SelectedNames?.map((baby: BabyInterface, i: number) => (
                <button key={i} onClick={() => UnselectName(baby)}>
                  <NameHolderSelected key={i} baby={baby} />
                </button>
              ))}
              {/* {SelectedNames?.map((baby: BabyInterface, i: number) => (
                <button key={i} onClick={() => UnselectName(baby)}>
                  <NameHolderSelected key={i} baby={baby} />
                </button>
              ))} */}
            </div>
            <div
              className={`flex my-2 ${
                locale == "he" ? "flex-row-reverse" : ""
              } text-[#494370] text-2xl  capitalize `}
            >
              <span>
                {/* {t.results} ({API_NAMES.length}) */}
                Choose a name below to get started
              </span>
            </div>
            <div className="relative">
              <SelectArea
                filterednames={filterednames}
                SearchName={SearchName}
              />
            </div>
          </div>
        </div>

        <img
          src="/cloud.png"
          className="absolute z-[-1] left-10  hidden md:block top-36 "
          alt="lines"
        />

        <img
          src="/fish.png"
          className="absolute z-[-1] hidden md:block right-4 top-24 "
          alt="fish"
        />
      </div>
      <div className=" hidden sm:flex absolute left-[15%] md:left-[0%]  xl:left-[5%]  top-[100%]  md:top-[30%]    mx-4 md:mx-0 md:w-auto min-h-[150px]  min-w-[500px]    md:min-w-[150px] md:min-h-[500px] my-10 bg-gray-200">
        <Ad />
      </div>
      <div className="hidden sm:flex absolute  right-[13%] md:right-[0%]  xl:right-[5%]  top-[120%]  md:top-[30%]    mx-4 md:mx-0 md:w-auto min-h-[150px]  min-w-[500px]    md:min-w-[150px] md:min-h-[500px] my-10 bg-gray-200">
        <Ad />
      </div>
    </div>
  );
}
