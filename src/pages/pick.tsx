import Head from "next/head";
import Navbar from "@/components/Navbar";
import SearchIcon from "@/components/Icons/SearchIcon";
import CircleIcon from "@/components/Icons/CircleIcon";
import NameHolder from "@/components/NameHolder";
import NameHolderSelected from "@/components/NameHolderSelected";
import { useContext, useEffect, useMemo, useState } from "react";
import { BabyInterface } from "@/utils/types";
import NotFoundMessage from "@/components/NotFoundMessage";
import FinishModal from "@/components/FinishModal";
import { useRouter } from "next/router";
import en from "../../locales/en";
import he from "../../locales/he";
import CloseIcon from "@/components/Icons/CloseIcon";
import axios from "axios";
import { NamesContext } from "./_app";
import Ad from "@/components/Ad";
import { DummyNames } from "@/utils/mock-data";
import SelectArea from "@/components/SelectArea";
import { NextApiRequest } from "next";
import requestIp from "request-ip";
import { get } from "https";

const getIpAddress = (req: NextApiRequest): any => {
  const clientIp = requestIp.getClientIp(req);
  // If you're behind a proxy or load balancer, the IP address may be
  // in a different format. Use the following line to normalize the IP
  // address:
  // const normalizedIp = clientIp.replace(/::ffff:/, '');
  console.log(clientIp);
  return clientIp;
};
export default function Pick(req: NextApiRequest) {
  const ipAddress = getIpAddress(req);

  const router = useRouter();
  const { SelectedNames, Set_API_NAMES, AllNames, dispatch, NamesDispatch } =
    useContext(NamesContext);
  const { locale } = router;
  const t = locale === "en" ? en : he;
  // States
  const [Gender, setGender] = useState("");
  const [SearchName, setSearchName] = useState("");

  const [filterednames, setfilterednames] = useState<BabyInterface[]>(AllNames);
  const [show, setShow] = useState(false);
  const [cursor, setcursor] = useState(50);
  const [Showmore, setShowmore] = useState(false);

  // End States

  // functions
  const UnselectName = (baby: BabyInterface) => {
    if (SelectedNames.includes(baby)) {
      dispatch!({ type: "REMOVE", payload: baby });
      setfilterednames([baby, ...filterednames]);
    }
  };

  const findName = (name: string) => {
    setSearchName(name);
    if (Gender == "") {
      setfilterednames(AllNames.filter((baby) => baby.name.startsWith(name)));
    } else {
      setfilterednames(
        AllNames.filter(
          (baby) => baby.name.startsWith(name) && baby.gender == Gender
        )
      );
    }
  };
  const findGender = (gender: string) => {
    if (Gender == gender) {
      setGender("");
      setfilterednames(
        AllNames.filter((baby) => baby.name.startsWith(SearchName))
      );
    } else {
      setGender(gender);
      setfilterednames(
        AllNames.filter(
          (baby) => baby.name.startsWith(SearchName) && baby.gender == gender
        )
      );
    }
  };

  const Finish = async () => {
    try {
      if (process.env.NEXT_PUBLIC_API_URL && SelectedNames.length > 0) {
        const { data: NAMES } = await axios.post(
          process.env.NEXT_PUBLIC_API_URL,
          {
            body: [
              {
                name: "סיגל",
                gender: "female",
              },
              {
                name: "עידו",
                gender: "male",
              },
              {
                name: "אביב",
                gender: "male",
              },
            ],
          }
        );

        if (NAMES) {
          console.log(NAMES);
          const params = NAMES.map((e: any) => e.name).join("+");
          NAMES.map((e: any) => {
            if (e.isGirl) {
              Object.assign(e, { gender: "female" });
            } else {
              Object.assign(e, { gender: "male" });
            }
          });
          Set_API_NAMES!(NAMES);

          setShow(true);
          setTimeout(() => {
            setShow(false);
          }, 5000);

          router.push(`/finish?name=${params}`);
        }
      }
    } catch (err) {
      setShow(true);
      setTimeout(() => {
        setShow(false);
        router.push("/finish");
      }, 5000);
    }
  };

  useEffect(() => {
    setfilterednames(AllNames);
  }, [AllNames]);
  return (
    <div className="relative  z-10">
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Navbar />
      <div className="mx-auto container   px-9 pt-16 text-center flex  flex-col justify-center items-center max-w-[1900px]">
        {show && <FinishModal closeModal={() => setShow(false)} />}
        <h1 className="font-poppins self-start px-4 lg:px-[150px] xl:px-[320px]  text-xl md:text-2xl text-[#0D0441]">
          {t.pickHeader}
        </h1>
        <h1>{ipAddress}</h1>

        {/* Content Container */}
        <div className="flex  w-full">
          <div className="   px-4 px-[150px] xl:px-[320px] ">
            <div
              className={`flex w-full flex-col ${
                locale === "en" ? "xl:flex-row" : "xl:flex-row-reverse"
              }  items-center w-full z-1 pt-8`}
            >
              {/* Search component */}
              <div
                className={`relative rounded-full flex ${
                  locale == "en" ? "flex-row" : "flex-row-reverse"
                }  shadow-md bg-white py-2 px-4 items-center w-full `}
              >
                <button className="cursor-pointer mx-2">
                  <SearchIcon />
                </button>

                <input
                  placeholder={t.search}
                  value={SearchName}
                  className={` md:flex-1 capitalize font-poppins text-[#8984A9] text-xl ml-2 ${
                    locale == "he" ? "rtl-text" : ""
                  }  mx-1  p-1 outline-none border-0`}
                  onChange={(e) => findName(e.target.value)}
                />
                <button
                  className={`mx-2 p-2 min-w-[10px] absolute ${
                    locale == "en" ? "right-4" : "left-4"
                  } `}
                  onClick={() => findName("")}
                >
                  <CloseIcon />
                </button>
              </div>
              {/* end Search component */}

              {/* Gender Picker */}
              <div className="relative flex mt-2 xl:mt-0">
                <button
                  className={`flex mx-4 p-2   shadow-lg rounded-full items-center  ${
                    Gender == "male" ? "bg-[#247488]" : "bg-white"
                  }    ${locale == "en" ? "" : "text-rtl"}`}
                  onClick={() => findGender("male")}
                >
                  <CircleIcon color="#81CBE0" />
                  <span
                    className={`text-lg font-light px-2 capitalize bg-green ${
                      locale == "en" ? "" : "text-rtl"
                    }`}
                  >
                    {t.boy}
                  </span>
                </button>

                <button
                  className={`flex mx-4 p-2 shadow-lg rounded-full items-center  ${
                    Gender == "female" ? "bg-[#b3a0cc]" : "bg-white"
                  } `}
                  onClick={() => findGender("female")}
                >
                  <CircleIcon color="#885AC3" />

                  <span
                    className={`text-lg font-light px-2 capitalize ${
                      locale == "en" ? "" : "text-rtl"
                    }`}
                  >
                    {t.girl}
                  </span>
                </button>
              </div>
              {/* end gender picker */}
            </div>
            {/* To be added  */}
            <div className="flex-1  bg-white w-full flex flex-col  rounded-lg px-2 mt-8 md:px-9 py-8 shadow-lg">
              {/* selected names */}
              <div className="pb-4  flex flex-wrap min-h-[80px]">
                {SelectedNames.map((baby: BabyInterface, i: number) => (
                  <button key={i} onClick={() => UnselectName(baby)}>
                    <NameHolderSelected key={i} baby={baby} />
                  </button>
                ))}
              </div>
              <div
                className={`flex my-2 ${
                  locale == "he" ? "flex-row-reverse" : ""
                } text-[#494370] text-2xl  capitalize `}
              >
                <span>
                  {/* {t.results} ({API_NAMES.length}) */}
                  Choose a name below to get started
                </span>
              </div>
              <div className="relative">
                <SelectArea
                  filterednames={filterednames}
                  SearchName={SearchName}
                />
              </div>

              <div
                className={`fixed  bottom-0 bg-white sm:mt-12   sm:border-t-[3px] border-dashed p-4 sm:p-0 inset-x-0  sm:static sm:flex ${
                  locale === "en" ? "md:flex-row-reverse" : "md:flex-row"
                } `}
              >
                <button
                  disabled={SelectedNames.length < 2 ? true : false}
                  className={`px-8 py-2 sm:mt-4 shadow-xl w-full  sm:w-auto  ${
                    locale == "en" ? "" : "text-rtl"
                  } bg-[#1C1067] ${
                    SelectedNames.length < 2
                      ? "o,dispatchpacity-50 cursor-not-allowed bg-[#C2BEC8]"
                      : "bg-[#1C1067] "
                  } uppercase text-white rounded-full  text-xl`}
                  onClick={Finish}
                >
                  {t.finishButton}
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>

      <img
        src="/cloud.png"
        className="absolute z-[-1] left-10  hidden md:block top-36 "
        alt="lines"
      />

      <img
        src="/fish.png"
        className="absolute z-[-1] hidden md:block right-20 top-24 "
        alt="fish"
      />
      <img
        src="/pinkCircle.svg"
        className="absolute z-[-3] w-[186px] h-[171px] hidden md:block right-0 top-24 "
        alt="circle"
      />
      <img
        src="/lines-min.png"
        className="absolute z-[-1] left-[16%]  hidden md:block top-[80%] "
        alt="lines"
      />
      <img
        src="/starslines.svg"
        className="absolute z-[-1] right-[6%]  hidden md:block top-[70%] "
        alt="lines"
      />
      <div className="absolute left-[0%] xl:left-[5%] top-[30%]    mx-4 md:mx-0 md:w-auto      min-w-[150px] min-h-[500px] my-10 bg-gray-200">
        <Ad />
      </div>
      <div className="min-w-[150px] absolute right-[0%] xl:right-[5%] top-[30%] mx-4 md:mx-0 md:w-auto min-h-[500px] my-10 bg-gray-200">
        <Ad />
      </div>
    </div>
  );
}
